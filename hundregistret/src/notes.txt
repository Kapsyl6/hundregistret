

NumberComparator

import java.util.Comparator;

public class NumberComparator implements Comparator <Number> {

    public int compare(Number first, Number second) {
        if(first.getValue() < second.getValue())
            return -1;
        if(first.getValue() < second.getValue())
                return 1;
            
        return 0;

    }

    
}



// Frej Guste kagu7440 

import java.util.Comparator;

public class DogTailNameComparator implements Comparator <Dog> {

    private final int multiplicator = 1000;
    public int compare(Dog firstDog, Dog secondDog) {
       
        
        return (firstDog.getName().compareTo(secondDog.getName())) * ((int)(firstDog.getTailLength() * multiplicator - secondDog.getTailLength() * multiplicator));
    }


    
} 


// Frej Guste kagu7440 

import java.util.Comparator;

public class DogTailNameComparator implements Comparator <Dog> {

    private final int multiplicator = 1000;
    public int compare(Dog firstDog, Dog secondDog) {
       
        int comparedDog = firstDog.getName().compareTo(secondDog.getName());

        if (comparedDog == 0) {
            comparedDog = (int)(firstDog.getTailLength() * multiplicator - secondDog.getTailLength() * multiplicator);
        }
        
        return comparedDog;
    }


    
} 



import java.util.ArrayList;
import java.util.Comparator;

public class DogSorter implements Comparator <Dog> {

    
    private final int multiplicator = 1000;
    

    private static void swapDogs(ArrayList <Dog> dogList, int firstIndex, int secondIndex ){

        Dog firstDog = dogList.get(firstIndex);
        Dog secondDog = dogList.get(secondIndex);

        dogList.set(firstIndex, secondDog);
        dogList.set(secondIndex, firstDog);
   }

   /**  1. En Comparator som bestämmer hur hundarna ska jämföras, 

        2. Listan av hundar som ska sökas igenom
        
        3. Varifrån metoden ska börja söka   
   */
   
   private static int nextDog(Comparator<Dog> comparator, ArrayList<Dog> dogList, int startIndex) {
        int bestIndex = startIndex;
        for (int i = startIndex + 1; i < dogList.size(); i++){
            if (comparator.compare(dogList.get(i), dogList.get(bestIndex)) < 0 ){
                bestIndex = i;
            }
        }
        
        
        return bestIndex;
}

@Override
public int compare(Dog o1, Dog o2) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'compare'");
}


}


import java.util.ArrayList;

public class DogSorter {

    private final int multiplicator = 1000;

    private static void swapDogs(ArrayList<Dog> dogList, int firstIndex, int secondIndex) {
        Dog firstDog = dogList.get(firstIndex);
        Dog secondDog = dogList.get(secondIndex);

        dogList.set(firstIndex, secondDog);
        dogList.set(secondIndex, firstDog);
    }

    /**  
     *  1. Listan av hundar som ska sökas igenom
     *  2. Varifrån metoden ska börja söka   
     */
    private static int nextDog(ArrayList<Dog> dogList, int startIndex) {
        int bestIndex = startIndex;
        TailLengthComparator comparator = new TailLengthComparator(); // Skapar en instans av Comparator
        for (int i = startIndex + 1; i < dogList.size(); i++) {
            if (comparator.compare(dogList.get(i), dogList.get(bestIndex)) < 0) {
                bestIndex = i;
            }
        }

        return bestIndex;
    }
}

import java.util.ArrayList;
import java.util.Comparator;

public class DogSorter implements Comparator <Dog> {

    
    private final int multiplicator = 1000;
    

    private static void swapDogs(ArrayList <Dog> dogList, int firstIndex, int secondIndex ){

        Dog firstDog = dogList.get(firstIndex);
        Dog secondDog = dogList.get(secondIndex);

        dogList.set(firstIndex, secondDog);
        dogList.set(secondIndex, firstDog);
   }

   /**  1. En Comparator som bestämmer hur hundarna ska jämföras, 

        2. Listan av hundar som ska sökas igenom
        
        3. Varifrån metoden ska börja söka   
   */
   
   private static int nextDog(Comparator<Dog> comparator, ArrayList<Dog> dogList, int startIndex) {
        int bestIndex = startIndex;
        for (int i = startIndex + 1; i < dogList.size(); i++){
            if (comparator.compare(dogList.get(i), dogList.get(bestIndex)) < 0 ){
                bestIndex = i;
            }
        }
        
        
        return bestIndex;
}


}


import java.util.ArrayList;
import java.util.Optional;

public class DogCollection {
    
    private ArrayList<Dog> dogList = new ArrayList<>();

        //Lägger till en hund till samlingen
    public boolean addDog(Dog d){ 
        for (Dog dog : dogList) {
            if (dog.getName().equalsIgnoreCase(d.getName())){
                return false;
            }
        }
        dogList.add(d);
        return true;
    }
        // Tar bort en hund från samlingen om denna existerar
    public boolean removeDog(Dog d){ 
        if (dogList.contains(d)){
            dogList.remove(d);
            return true;
        }
        return false;
    }
    
        // Returnerar om samlingen innehåller den givna hunden eller inte
    public boolean containsDog(Dog insertDog){ 
        for (Dog i : dogList){
            if (insertDog.getName().equals(i.getName())){
                System.out.println(insertDog + " exists within the system.");
                return true;
            }
        }
        System.out.println("This dog does not exist.");
        return false;
    }
    public boolean containsDog(String insertDog){
        for (Dog i : dogList){
            if (insertDog.equalsIgnoreCase(i.getName())){
                System.out.println(insertDog + " exists within the system.");
                return true;
            }
        }
        System.out.println( "This dog does not exist.");
        return false;
    }

        // Returnerar hunden med det givna namnet, annars null
    public Optional<Dog> getDog(String name){
        for (Dog dog : dogList){
            if (dog.getName().equals(name)){
                return Optional.of(dog);
            }
        }
        return Optional.empty();
    }

        // Returnerar samtliga hundar
    public ArrayList<Dog> getDogs(){
        ArrayList<Dog> returnList = new ArrayList<Dog>(dogList);
        DogSorter.sortDogs(new DogNameComparator(), returnList);
        return returnList;
    }

    public ArrayList<Dog> getDogsWithTail(int minimumTailLength, ArrayList<Dog> dogList){

        ArrayList<Dog> filteredDogs = new ArrayList<>();
        for (Dog dog : dogList) {
            if (dog.getTailLength() >= minimumTailLength) {
                filteredDogs.add(dog);
            }
        }
        DogSorter.sortDogs((firstDog, secondDog) -> Double.compare(firstDog.getTailLength() ,secondDog.getTailLength()), filteredDogs);
        return filteredDogs;
    }
        


}   
